import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { VStack, Divider, Card, CardBody, Text, Button, Flex, useColorModeValue, ButtonGroup, Tooltip, Box, HStack, IconButton, Input, InputGroup, InputRightElement, Select } from '@chakra-ui/react';
import { FiPlus, FiRefreshCw, FiChevronUp, FiChevronDown, FiFilter, FiSearch } from 'react-icons/fi';
import { Task } from '@/types/supabase';
import { TaskWithStage } from './useTaskList';
import TaskTableHeader, { SortField, SortDirection } from './TaskTableHeader';
import TaskRow from './TaskRow';

interface TaskTableProps {
  tasks: TaskWithStage[];
  selectedTasks: string[];
  onTaskSelection: (taskId: string, isSelected: boolean) => void;
  onEditTask: (task: Task) => void;
  onDeleteTask: (taskId: string) => Promise<void>;
  onSelectAll: (isSelected: boolean) => void;
  onCreateTask: () => void;
  onRefresh: () => Promise<void>;
  getParentTask: (taskId: string | null) => Task | undefined;
  isLoading: boolean;
}

// הרחבת טיפוס המשימה לכלול תת-משימות
export interface TaskWithChildren extends TaskWithStage {
  childTasks?: TaskWithChildren[];
  displayIndex?: number; // מספור דינמי לתצוגה
}

const TaskTable: React.FC<TaskTableProps> = ({
  tasks,
  selectedTasks,
  onTaskSelection,
  onEditTask,
  onDeleteTask,
  onSelectAll,
  onCreateTask,
  onRefresh,
  getParentTask,
  isLoading
}) => {
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  const hoverBgColor = useColorModeValue('gray.50', 'gray.700');
  
  // הוספת state למיונים - קביעת hierarchical_number כברירת מחדל
  const [sortField, setSortField] = useState<SortField>('hierarchical_number');
  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');
  
  // state חדש לניהול מצב ההרחבה הגלובלי
  const [expandAll, setExpandAll] = useState<boolean>(false);
  
  // טיפול בלחיצה על עמודה למיון
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      // הפיכת כיוון המיון אם לוחצים שוב על אותה עמודה
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      // קביעת עמודה חדשה למיון והתחלה עם מיון עולה
      setSortField(field);
      setSortDirection('asc');
    }
  };
  
  // פונקציה להרחבת כל המשימות
  const handleExpandAll = () => {
    setExpandAll(true);
  };
  
  // פונקציה לצמצום כל המשימות
  const handleCollapseAll = () => {
    setExpandAll(false);
  };
  
  // בניית עץ המשימות
  const buildTaskTree = useCallback((): TaskWithChildren[] => {
    // מיפוי משימות לפי ID להקלה על חיפוש
    const taskMap = new Map<string, TaskWithChildren>();
    tasks.forEach(task => {
      taskMap.set(task.id, { ...task, childTasks: [] });
    });

    // בניית מבנה העץ
    const rootTasks: TaskWithChildren[] = [];
    
    taskMap.forEach(task => {
      if (task.parent_task_id) {
        // משימה עם הורה - הוספה לרשימת תת-המשימות של ההורה
        const parent = taskMap.get(task.parent_task_id);
        if (parent) {
          parent.childTasks = parent.childTasks || [];
          parent.childTasks.push(task);
        } else {
          // אם ההורה לא קיים, נוסיף כמשימת שורש
          rootTasks.push(task);
        }
      } else {
        // משימה ראשית ללא הורה
        rootTasks.push(task);
      }
    });
    
    return rootTasks;
  }, [tasks]);
  
  // הוספת מספור דינמי למשימות האב
  const addDisplayIndices = useCallback((taskTree: TaskWithChildren[]): TaskWithChildren[] => {
    // סינון רק של משימות אב (אלו עם מספר היררכי שלם, ללא נקודות)
    const parentTasksOnly = taskTree.filter(task => {
      if (!task.hierarchical_number) return false;
      const hierarchicalNumber = String(task.hierarchical_number);
      return /^\d+$/.test(hierarchicalNumber);
    });
    
    // מיון משימות האב לפי המספר ההיררכי המקורי שלהן
    parentTasksOnly.sort((a, b) => {
      if (!a.hierarchical_number || !b.hierarchical_number) return 0;
      return parseInt(String(a.hierarchical_number)) - parseInt(String(b.hierarchical_number));
    });
    
    // הקצאת מספור רציף (1, 2, 3, ...) למשימות האב
    parentTasksOnly.forEach((task, index) => {
      task.displayIndex = index + 1;
    });
    
    // החזרת כל העץ המקורי עם המספור הדינמי שהוסף
    return taskTree;
  }, []);
  
  // מיון המשימות לפי השדה והכיוון שנבחרו
  const sortTasks = useCallback((taskList: TaskWithChildren[]): TaskWithChildren[] => {
    return [...taskList].sort((a, b) => {
      let comparison = 0;
      
      // מיון לפי השדה שנבחר
      switch (sortField) {
        case 'title':
          comparison = a.title.localeCompare(b.title);
          break;
        case 'hierarchical_number':
          if (a.hierarchical_number && b.hierarchical_number) {
            if (typeof a.hierarchical_number === 'string' && typeof b.hierarchical_number === 'string') {
              try {
                const aParts = a.hierarchical_number.split('.').map(Number);
                const bParts = b.hierarchical_number.split('.').map(Number);
                
                for (let i = 0; i < Math.min(aParts.length, bParts.length); i++) {
                  if (aParts[i] !== bParts[i]) {
                    comparison = aParts[i] - bParts[i];
                    break;
                  }
                }
                
                if (comparison === 0) {
                  comparison = aParts.length - bParts.length;
                }
              } catch (error) {
                console.error('שגיאה במיון לפי מספר היררכי:', error, { a: a.hierarchical_number, b: b.hierarchical_number });
                comparison = 0;
              }
            } else {
              comparison = String(a.hierarchical_number).localeCompare(String(b.hierarchical_number));
            }
          } else if (a.hierarchical_number) {
            comparison = -1;
          } else if (b.hierarchical_number) {
            comparison = 1;
          }
          break;
        case 'status':
          comparison = a.status.localeCompare(b.status);
          break;
        case 'priority':
          // מיון לפי עדיפות (high, medium, low)
          const priorityMap: Record<string, number> = { high: 0, medium: 1, low: 2 };
          const aPriority = priorityMap[a.priority] || 99;
          const bPriority = priorityMap[b.priority] || 99;
          comparison = aPriority - bPriority;
          break;
        case 'responsible':
          comparison = (a.responsible || '').localeCompare(b.responsible || '');
          break;
        case 'due_date':
          // מיון לפי תאריך יעד
          const dateA = a.due_date ? new Date(a.due_date).getTime() : 0;
          const dateB = b.due_date ? new Date(b.due_date).getTime() : 0;
          comparison = dateA - dateB;
          break;
        case 'start_date':
          // מיון לפי תאריך התחלה
          const startDateA = a.start_date ? new Date(a.start_date).getTime() : 0;
          const startDateB = b.start_date ? new Date(b.start_date).getTime() : 0;
          comparison = startDateA - startDateB;
          break;
        default:
          // ברירת מחדל - אין מיון
          return 0;
      }
      
      // היפוך הסדר אם המיון יורד
      return sortDirection === 'asc' ? comparison : -comparison;
    });
  }, [sortField, sortDirection]);
  
  // סינון המשימות לפי החיפוש
  const filterTasks = useCallback((taskList: TaskWithChildren[]): TaskWithChildren[] => {
    if (!searchQuery.trim()) return taskList;
    
    return taskList.filter(task => {
      const matchesSearch = 
        task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (task.description && task.description.toLowerCase().includes(searchQuery.toLowerCase()));
      
      // אם המשימה עצמה תואמת, החזר אותה
      if (matchesSearch) return true;
      
      // אם יש תת-משימות, בדוק אם אחת מהן תואמת
      if (task.childTasks && task.childTasks.length > 0) {
        const filteredChildren = filterTasks(task.childTasks);
        task.childTasks = filteredChildren;
        return filteredChildren.length > 0;
      }
      
      return false;
    });
  }, [searchQuery]);
  
  // בניית העץ וסינון ומיון המשימות
  const taskTree = buildTaskTree();
  const sortedTaskTree = sortTasks(taskTree);
  const taskTreeWithIndices = addDisplayIndices(sortedTaskTree);
  const filteredTaskTree = searchQuery ? filterTasks(taskTreeWithIndices) : taskTreeWithIndices;
  
  // הפעלת חיפוש בלחיצה על Enter
  const handleSearchKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      setIsSearching(true);
      // החיפוש כבר מתבצע אוטומטית דרך סינון המשימות
    }
  };
  
  if (tasks.length === 0) {
    return (
      <Card variant="outline" p={8} textAlign="center" boxShadow="md">
        <CardBody>
          <Text mb={4} fontSize="lg">אין משימות להצגה</Text>
          <VStack spacing={4}>
            <Button
              leftIcon={<FiPlus />}
              colorScheme="blue"
              onClick={onCreateTask}
              size="md"
            >
              צור משימה חדשה
            </Button>
            
            <Button
              leftIcon={<FiRefreshCw />}
              colorScheme="teal"
              variant="outline"
              onClick={onRefresh}
              isLoading={isLoading}
              size="md"
            >
              סנכרן נתוני פרויקט
            </Button>
            
            <Text fontSize="sm" color="gray.500" maxW="400px" mt={2}>
              אם לא מופיעות משימות, יתכן שצריך לסנכרן את נתוני הפרויקט כדי לטעון את המשימות מטבלת המשימות הספציפית של הפרויקט.
            </Text>
          </VStack>
        </CardBody>
      </Card>
    );
  }
  
  return (
    <Card variant="outline" boxShadow="sm" borderRadius="md">
      <CardHeader p={4}>
        <Flex flexDirection={{ base: "column", md: "row" }} gap={4} justifyContent="space-between">
          <HStack>
            <InputGroup size="md" width={{ base: "100%", md: "300px" }}>
              <Input
                placeholder="חיפוש משימות..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyPress={handleSearchKeyPress}
                borderRadius="md"
              />
              <InputRightElement>
                <IconButton
                  aria-label="חיפוש"
                  icon={<FiSearch />}
                  size="sm"
                  variant="ghost"
                  onClick={() => setIsSearching(true)}
                />
              </InputRightElement>
            </InputGroup>
            <IconButton
              aria-label="סנן"
              icon={<FiFilter />}
              variant="outline"
              borderRadius="md"
            />
          </HStack>
          
          <HStack spacing={2}>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setExpandAll(!expandAll)}
              leftIcon={expandAll ? <FiChevronUp /> : <FiChevronDown />}
            >
              {expandAll ? 'כווץ הכל' : 'הרחב הכל'}
            </Button>
          </HStack>
        </Flex>
      </CardHeader>
      
      <CardBody p={0}>
        <TaskTableHeader 
          isAllSelected={selectedTasks.length === tasks.length && tasks.length > 0}
          onSelectAll={onSelectAll}
          sortField={sortField}
          sortDirection={sortDirection}
          onSort={handleSort}
        />
        
        <VStack spacing={0} align="stretch" divider={<Divider />}>
          {filteredTaskTree.map((task, index) => (
            <TaskRow
              key={task.id}
              task={task}
              isSelected={selectedTasks.includes(task.id)}
              borderColor={borderColor}
              hoverBgColor={hoverBgColor}
              onSelect={onTaskSelection}
              onEdit={onEditTask}
              onDelete={onDeleteTask}
              getParentTask={getParentTask}
              level={0}
              hasChildren={task.childTasks !== undefined && task.childTasks.length > 0}
              childTasks={task.childTasks || []}
              isLastChild={index === filteredTaskTree.length - 1}
              expandAll={expandAll}
            />
          ))}
        </VStack>
      </CardBody>
    </Card>
  );
};

export default TaskTable; 